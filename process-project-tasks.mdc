---
description: 
globs: 
alwaysApply: false
---
# Development Task List Management

Guidelines for managing development task lists in markdown files to track progress on building consistent, secure, and performant applications through systematic development phases.

## Development Task Implementation Strategy

### Phase-Based Development Execution
- **Complete phases sequentially:** Generally, phases should be completed in order (Setup → Architecture → MVP Features → etc.) due to dependencies
- **Within-phase flexibility:** Tasks within a phase can often be worked on in parallel or different orders, depending on dependencies
- **Quality-first approach:** Emphasize code quality, security, and performance at each phase
- **Dependency awareness:** Before starting any task, verify that prerequisite tasks and their quality checks are completed

### Task Completion Protocol
- **Sub-task level:** When you finish a **sub-task**, immediately mark it as completed by changing `[ ]` to `[x]`
- **Major task level:** If **all** subtasks underneath a major task are now `[x]`, also mark the **major task** as completed
- **Phase level:** When **all** major tasks in a phase are completed, mark the phase as completed with a summary comment
- **Quality checkpoint:** After completing each **major task**, perform quality review before getting user approval to proceed

### Parallel Development Management
- **Identify parallel opportunities:** Look for tasks that can be worked on simultaneously (e.g., frontend components, backend APIs, database models)
- **Communicate dependencies:** Clearly state when tasks are blocked waiting for other development tasks to complete
- **Code organization:** Suggest appropriate file organization and modular development approaches
- **Testing parallel development:** Ensure tests are written alongside feature development

## Development Structure Maintenance

### Code Organization
1. **Track all created files:** Maintain the "Project Structure" section with every source file, configuration file, and test file created
2. **Update structure as development progresses:** Add new directories, components, utilities, and modules as they're created
3. **Include file descriptions:** Each file should have a brief description of its purpose and functionality
4. **Organize by architectural patterns:** Keep files grouped according to chosen architectural patterns (MVC, component-based, etc.)

### Development Documentation Updates
1. **Code documentation:** Keep inline code comments and documentation current
2. **API documentation:** Update API documentation as endpoints and interfaces are implemented
3. **Architecture decisions:** Document significant technical and design decisions
4. **Setup instructions:** Keep development environment setup instructions current

## AI Instructions for Development Management

### Pre-Task Development Analysis
Before starting any development task, the AI must:
1. **Check dependencies:** Verify that prerequisite development tasks are completed and tested
2. **Assess code impact:** Understand how the current task affects existing code and architecture
3. **Identify files to modify:** List all files that will be created, modified, or affected
4. **Plan implementation approach:** Outline the coding approach and architectural considerations

### During Development Task Execution
While working on development tasks, the AI must:
1. **Follow coding standards:** Adhere to the project's established coding conventions and best practices
2. **Write clean, maintainable code:** Focus on code readability, modularity, and reusability
3. **Implement security best practices:** Include input validation, authentication checks, and secure coding practices
4. **Performance considerations:** Write efficient code with consideration for performance implications
5. **Update progressively:** Mark sub-tasks as complete immediately after implementation and basic testing
6. **Handle development blockers:** If blocked by technical issues, clearly communicate the problem and research solutions

### Post-Development Task Activities
After completing each major development task, the AI must:
1. **Update task list:** Mark the major task as complete and update the project structure
2. **Code review:** Perform self-review of implemented code for quality, security, and performance
3. **Testing:** Run relevant tests and ensure new functionality works correctly
4. **Documentation updates:** Update relevant code documentation and API documentation
5. **Request approval:** Ask the user to review the implemented functionality before proceeding
6. **Suggest next steps:** Recommend the next logical development task(s) based on dependencies and priority

### Cross-Phase Development Considerations
When transitioning between development phases:
1. **Phase completion review:** Summarize development accomplishments and code quality metrics
2. **Architecture validation:** Ensure the codebase maintains architectural integrity
3. **Performance baseline:** Establish performance baselines and benchmarks where applicable
4. **Security review:** Conduct security review of implemented features
5. **Technical debt assessment:** Identify any technical debt accumulated and plan for resolution

## Development Quality Management

### Code Quality Standards
- **Consistency:** Ensure consistent coding style, naming conventions, and file organization
- **Modularity:** Write modular, reusable code that follows DRY principles
- **Testing:** Implement comprehensive unit tests, integration tests, and end-to-end tests
- **Documentation:** Maintain clear code comments and documentation
- **Performance:** Consider performance implications in all development decisions

### Security Development Practices
- **Input validation:** Implement proper input validation and sanitization
- **Authentication/Authorization:** Ensure proper access controls and permission checks
- **Data protection:** Implement encryption and secure data handling practices
- **Vulnerability prevention:** Follow OWASP guidelines and security best practices
- **Security testing:** Include security testing in the development process

### Performance Development Practices
- **Efficient algorithms:** Choose appropriate data structures and algorithms
- **Database optimization:** Write efficient queries and implement proper indexing
- **Frontend optimization:** Implement lazy loading, code splitting, and asset optimization
- **Caching strategies:** Implement appropriate caching at various levels
- **Performance monitoring:** Include performance measurement and monitoring code

## Error Handling and Development Recovery

### When Development Tasks Fail
- **Debug systematically:** Use debugging tools and techniques to identify root causes
- **Document the issue:** Clearly explain technical problems and attempted solutions
- **Research solutions:** Investigate documentation, community resources, and best practices
- **Propose alternatives:** Suggest alternative implementation approaches
- **Update approach:** Modify the development approach based on learnings

### When Technical Decisions Change
- **Assess impact:** Determine how changes affect existing code and future development
- **Refactor systematically:** Plan and execute code refactoring to accommodate changes
- **Update tests:** Modify tests to reflect changes in functionality or architecture
- **Update documentation:** Ensure all documentation reflects the current technical decisions

## Development Communication Protocols

### Progress Updates
- **Development milestones:** Report on completion of major features and components
- **Code quality metrics:** Share insights on test coverage, performance, and code quality
- **Technical challenges:** Communicate any significant technical hurdles and proposed solutions
- **Architecture insights:** Share learnings about architectural decisions and their effectiveness

### Technical Decision Points
- **Implementation choices:** Explain rationale behind specific technical implementation choices
- **Trade-offs:** Clearly communicate performance, security, or maintainability trade-offs
- **Alternative approaches:** When multiple technical solutions are viable, present options with pros/cons

This development-focused workflow ensures systematic progress through application development while maintaining high standards for code quality, security, and performance throughout the entire development lifecycle.
