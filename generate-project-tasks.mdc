---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Project Task List from a Project Specification Document

## Goal

To guide an AI assistant in creating a comprehensive, phase-based task list in Markdown format based on an existing Project Specification Document (PSD). The task list should guide development of consistent, secure, and performant applications through systematic development phases, focusing purely on building high-quality code without deployment concerns.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/project/`
- **Filename:** `tasks-[project-spec-name].md` (e.g., `tasks-project-spec-hrm-system.md`)

## Process

1.  **Receive PSD Reference:** The user points the AI to a specific Project Specification Document file
2.  **Analyze PSD:** The AI reads and analyzes all sections of the PSD, paying special attention to technical architecture, feature requirements, quality standards, and development phases
3.  **Phase 1: Generate Development Phases:** Based on the PSD analysis, create the file and generate the main development phases. Present these phases to the user in the specified format. Inform the user: "I have generated the development phases based on the PSD. Ready to generate the detailed tasks for each phase? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go"
5.  **Phase 2: Generate Detailed Tasks:** Once confirmed, break down each development phase into major tasks, and each major task into actionable sub-tasks
6.  **Identify Project Structure:** Based on the tasks and PSD, identify the complete project structure including directories, configuration files, source files, tests, and documentation
7.  **Generate Final Output:** Combine phases, tasks, sub-tasks, project structure, and notes into the final Markdown structure
8.  **Save Task List:** Save the generated document in the `/project/` directory

## Output Format

The generated project task list _must_ follow this structure:

```markdown
# [Project Name] - Development Tasks

## Project Structure

### Root Directory
- `README.md` - Project overview and setup instructions
- `package.json` / `requirements.txt` / `Cargo.toml` - Dependency management
- `.gitignore` - Git ignore patterns
- `.env.example` - Environment variable template
- `eslintrc.js` / `prettier.config.js` - Code quality and formatting configuration
- `jest.config.js` / `vitest.config.js` - Testing configuration

### Source Code Structure
- `src/` - Main source code directory
  - `components/` - Reusable UI components (frontend)
  - `pages/` or `routes/` - Application pages/routes
  - `services/` - Business logic and external service integrations  
  - `utils/` - Utility functions and helpers
  - `types/` or `models/` - Data types and models
  - `config/` - Application configuration
  - `middleware/` - Request/response middleware
  - `hooks/` - Custom hooks (if React/Vue)
  - `stores/` or `state/` - State management
- `tests/` - Test files (unit, integration, e2e)
- `docs/` - Project documentation
- `public/` or `static/` - Static assets (frontend)
- `styles/` or `assets/` - Styling and design assets

### Development Configuration
- `.vscode/` - VS Code workspace settings and extensions
- `scripts/` - Development and build scripts
- `config/` - Environment-specific configurations
- `migrations/` - Database migration files (if applicable)

### Notes

- File structure will vary based on chosen technology stack
- Test files should follow the naming convention of the chosen testing framework
- Follow framework-specific best practices for file organization
- Include proper TypeScript configuration if using TypeScript
- Ensure proper linting and formatting setup for code consistency

## Development Phases & Tasks

### Phase 1: Project Setup & Development Environment
- [ ] 1.0 Repository and Development Environment Setup
  - [ ] 1.1 Initialize Git repository with proper .gitignore
  - [ ] 1.2 Set up project structure and base files
  - [ ] 1.3 Configure package management and dependencies
  - [ ] 1.4 Set up development environment and build tools
  - [ ] 1.5 Configure environment variables and configuration management
- [ ] 2.0 Code Quality and Standards Setup
  - [ ] 2.1 Configure linting tools (ESLint, Pylint, etc.)
  - [ ] 2.2 Set up code formatting (Prettier, Black, etc.)
  - [ ] 2.3 Configure TypeScript (if applicable)
  - [ ] 2.4 Set up testing framework and configuration
  - [ ] 2.5 Create coding standards and conventions document

### Phase 2: Core Architecture & Foundation
- [ ] 3.0 Database Architecture
  - [ ] 3.1 Design and implement database schema
  - [ ] 3.2 Set up database connection and ORM/query layer
  - [ ] 3.3 Implement data access patterns and repositories
  - [ ] 3.4 Create database utilities and helpers
- [ ] 4.0 Authentication & Authorization
  - [ ] 4.1 Implement user authentication system
  - [ ] 4.2 Set up user registration and login flows
  - [ ] 4.3 Configure session/token management
  - [ ] 4.4 Implement role-based access control
- [ ] 5.0 Core Application Framework
  - [ ] 5.1 Set up routing and navigation
  - [ ] 5.2 Implement request validation and error handling
  - [ ] 5.3 Configure state management (Redux, Vuex, etc.)
  - [ ] 5.4 Set up API client and data fetching patterns

### Phase 3: MVP Feature Development
- [ ] 6.0 [Core Feature 1 from PSD]
  - [ ] 6.1 [Sub-task for Feature 1]
  - [ ] 6.2 [Sub-task for Feature 1]
- [ ] 7.0 [Core Feature 2 from PSD]
  - [ ] 7.1 [Sub-task for Feature 2]
  - [ ] 7.2 [Sub-task for Feature 2]
- [ ] 8.0 User Interface Foundation
  - [ ] 8.1 Implement responsive layout and navigation
  - [ ] 8.2 Create reusable UI component library
  - [ ] 8.3 Set up styling system (CSS-in-JS, SCSS, etc.)
  - [ ] 8.4 Implement accessibility features

### Phase 4: Advanced Features & Integration
- [ ] 9.0 [Advanced Feature 1 from PSD]
  - [ ] 9.1 [Sub-task for Advanced Feature 1]
- [ ] 10.0 Third-party Integrations
  - [ ] 10.1 Implement external API integrations
  - [ ] 10.2 Set up payment processing (if applicable)
  - [ ] 10.3 Configure email/notification services
- [ ] 11.0 Advanced UI/UX Features
  - [ ] 11.1 Implement advanced interactions and animations
  - [ ] 11.2 Add progressive web app features (if applicable)
  - [ ] 11.3 Optimize user experience and workflows

### Phase 5: Testing & Quality Assurance
- [ ] 12.0 Comprehensive Testing
  - [ ] 12.1 Write unit tests for core functionality
  - [ ] 12.2 Implement integration tests
  - [ ] 12.3 Set up end-to-end testing
  - [ ] 12.4 Perform security testing and vulnerability assessment
- [ ] 13.0 Code Quality Review
  - [ ] 13.1 Conduct comprehensive code review
  - [ ] 13.2 Refactor and optimize code structure
  - [ ] 13.3 Update documentation and comments
  - [ ] 13.4 Ensure coding standards compliance

### Phase 6: Performance & Security Optimization
- [ ] 14.0 Performance Optimization
  - [ ] 14.1 Implement caching strategies
  - [ ] 14.2 Optimize database queries and data access
  - [ ] 14.3 Optimize frontend performance (bundling, lazy loading)
  - [ ] 14.4 Add performance monitoring and profiling
- [ ] 15.0 Security Hardening
  - [ ] 15.1 Implement security best practices
  - [ ] 15.2 Add input validation and sanitization
  - [ ] 15.3 Configure HTTPS and security headers
  - [ ] 15.4 Conduct security audit and penetration testing
- [ ] 16.0 Final Documentation
  - [ ] 16.1 Complete API documentation
  - [ ] 16.2 Write user guides and help documentation
  - [ ] 16.3 Create developer setup and contribution guides
  - [ ] 16.4 Document architecture decisions and design patterns
```

## Interaction Model

The process explicitly requires a pause after generating development phases to get user confirmation ("Go") before proceeding to generate the detailed tasks. This ensures the high-level development plan aligns with user expectations before diving into implementation details.

## Target Audience

Assume the primary readers are **software developers** who will implement the complete application development lifecycle, focusing on code quality, security, and performance.

## Customization Notes

- Tasks should be adapted based on the specific technology stack mentioned in the PSD
- Feature-specific tasks (phases 3-4) should be generated based on the actual features defined in the PSD
- Testing and security tasks should match the quality standards outlined in the PSD
- Remove or add phases based on project complexity and requirements
