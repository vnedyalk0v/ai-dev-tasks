---
description: 
globs: 
alwaysApply: false
---
# Rule: Generating a Project Specification Document (PSD)

## Goal

Create a comprehensive Project Specification Document (PSD) in Markdown format for developing high-quality applications. Ensure consistency, security, performance, SEO optimization, and maintainability across all development projects, emphasizing clean code, DRY principles, and zero-vulnerability development practices.

## Process

1.  **Receive Initial Prompt:** The user provides a brief description or request for a new application project.
2.  **Ask Clarifying Questions:** Before writing the PSD, you *must* ask clarifying questions to gather sufficient detail about the project scope, technical requirements, and quality standards.
3.  **Generate PSD:** Based on the initial prompt and the user's answers, generate a PSD using the structure outlined below.
4.  **Save PSD:** Save the generated document as `project-spec-[project-name].md` inside the `/project/` directory.

## Clarifying Questions (Examples)

Adapt your questions based on the prompt, but here are key areas to explore:

### Project Scope & Vision
*   **Project Vision:** "What is the overall vision and main purpose of this application?"
*   **Target Audience:** "Who are the primary users of this application?"
*   **Core Value Proposition:** "What key problem does this application solve, and what makes it unique?"
*   **Project Scale:** "Is this a small utility, medium web app, or large-scale application?"
*   **Project Complexity Assessment:** Evaluate based on these factors:
    - "How many different user roles will the system have? (1=Simple, 2-3=Medium, 4+=Complex)"
    - "How many core features are planned? (1-3=Simple, 4-7=Medium, 8+=Complex)"
    - "Will this integrate with multiple external systems? (None=Simple, 1-2=Medium, 3+=Complex)"
    - "What is the expected data complexity? (Static=Simple, CRUD=Medium, Complex relationships=Complex)"
    - "What are the performance requirements? (Standard=Simple, High traffic=Medium, Real-time/Mission critical=Complex)"

### Technical Requirements
*   **Platform:** "What platforms should this run on? (Web, mobile, desktop, etc.)"
*   **Technology Stack Decision:** Ask these guided questions:
    - "What is your team's current expertise? (JavaScript, Python, Java, etc.)"
    - "What are your performance requirements? (Real-time, standard web app, etc.)"
    - "What is your expected user base size? (Hundreds, thousands, millions)"
    - "Do you need offline functionality or PWA features?"
    - "Are there any technology constraints or preferences from stakeholders?"
    - "What is your hosting/infrastructure preference? (Cloud, on-premise, static hosting)"
*   **Architecture:** "Any specific architectural patterns or constraints? (MVC, component-based, etc.)"
*   **Data Requirements:** "Does this application need to store, process, or manage data? If so, what type of data and storage approach?"
*   **Integrations:** "Does this need to integrate with external services, APIs, or existing systems?"
*   **Performance:** "Are there specific performance requirements or expected user loads?"

### Features & Functionality
*   **MVP Definition & Feature Prioritization:** Use MoSCoW method:
    - "MUST HAVE: What are the 3-5 absolutely essential features for launch?"
    - "SHOULD HAVE: What features are important but not critical for initial launch?"
    - "COULD HAVE: What features would be nice to have if time/budget allows?"
    - "WON'T HAVE (this time): What features are explicitly excluded from this version?"
*   **Feature Dependencies:** "Are there any features that depend on others being completed first?"
*   **User Roles:** "Are there different types of users with different permissions/capabilities?"
*   **Data Management:** "What kind of data will be stored, processed, or displayed?"
*   **User Interface:** "Any specific UI/UX requirements or design preferences?"

### Cross-Platform Considerations
*   **Device Support:** "What devices must this work on? (Desktop, tablet, mobile, all)"
*   **Browser Support:** "Which browsers and versions need to be supported?"
*   **Responsive Design Requirements:** "What are the breakpoints and responsive behavior requirements?"
*   **Accessibility Standards:** "What level of accessibility compliance is required? (WCAG AA recommended)"
*   **Offline Functionality:** "Does the app need to work offline or with poor connectivity?"
*   **Progressive Web App:** "Should this be a PWA with installable capabilities?"

### Quality & Standards
*   **Security Requirements:** "Any specific security requirements or sensitive data handling needs?"
*   **Performance Standards:** "What are the expected response times and performance benchmarks?"
*   **SEO Requirements:** "Are there specific SEO goals, target keywords, or search ranking objectives?"
*   **Browser/Device Support:** "Which browsers, devices, or operating systems need to be supported?"
*   **Accessibility:** "Are there accessibility requirements (WCAG compliance, etc.)?"

### Development Constraints
*   **Timeline:** "What's the target timeline or key milestones?"
*   **Team Size:** "Will this be developed solo or with a team?"
*   **Existing Codebase:** "Is this a new project or extending existing code?"
*   **Code Quality Standards:** "Are there specific code quality, testing, or documentation requirements?"

## PSD Structure

Generate the PSD with the following sections:

### 1. Project Overview
*   **Project Name & Description:** Clear, concise application summary
*   **Vision Statement:** High-level project vision and goals
*   **Target Audience:** Primary and secondary user groups
*   **Value Proposition:** Key benefits and competitive advantages

### 2. Project Scope
*   **In Scope:** What the application will include
*   **Out of Scope:** What the application will NOT include (to manage expectations)
*   **Success Criteria:** Measurable goals and quality standards
*   **Assumptions:** Key assumptions being made

### 3. Technical Architecture
*   **Technology Stack:** Programming languages, frameworks, databases, tools
*   **Technology Decision Rationale:** Document why specific technologies were chosen based on:
    - Team expertise and learning curve
    - Performance requirements and scalability needs
    - Integration requirements and ecosystem compatibility
    - Long-term maintenance and community support
    - Hosting and deployment considerations
*   **System Architecture:** High-level architecture description and patterns
*   **Development Environment:** Local development setup requirements
*   **Security Architecture:** Authentication, authorization, data protection approaches
*   **Integration Requirements:** External APIs, services, or systems

### 4. Project Assessment & Planning
*   **Complexity Score:** Based on assessment answers (Simple/Medium/Complex)
*   **Feature Prioritization:** MoSCoW categorization of all features
*   **MVP Definition:** Clear definition of minimum viable product
*   **Feature Dependencies:** Mapping of which features depend on others
*   **Cross-Platform Requirements:** Device, browser, and accessibility specifications
*   **Development Timeline:** Estimated timeline based on complexity and team size

### 5. Feature Requirements
*   **Core Features:** Essential functionality (MVP features)
*   **User Stories:** Detailed user narratives for key workflows
*   **User Roles & Permissions:** Different user types and their capabilities
*   **Data Model:** Key entities and relationships
*   **API Requirements:** External interfaces needed

### 6. Quality Standards
*   **Performance Requirements:** Response times, load handling, optimization targets, Core Web Vitals
*   **Security Requirements:** Data protection, authentication standards, zero-vulnerability mandate
*   **SEO Requirements:** Meta tags, structured data, page speed, mobile-first indexing, content optimization
*   **Code Quality Standards:** clean code principles, DRY implementation, coding conventions, documentation requirements, testing standards
*   **Browser/Device Compatibility:** Support requirements and responsive design needs
*   **Accessibility Standards:** WCAG compliance levels and accessibility features

### 7. Development Phases
*   **Phase 1: Project Setup & Development Environment:** Repository structure, development environment, coding standards, security tools, quality validation setup
*   **Phase 2: Core Architecture & Foundation:** Database design (if required), authentication (if required), foundational components, security implementation
*   **Phase 3: MVP Feature Development:** Essential user-facing functionality with SEO optimization, continuous quality validation
*   **Phase 4: Advanced Features & Integration:** Additional functionality beyond MVP, third-party integrations, performance optimization
*   **Phase 5: Testing & Quality Assurance:** Comprehensive testing, code review, vulnerability assessment, quality validation
*   **Phase 6: Performance & Security Optimization:** Performance tuning, security hardening, SEO enhancement, final quality validation

### 8. Development Standards
*   **clean code principles:** SOLID principles, readable code, meaningful naming, single responsibility
*   **DRY Implementation:** Don't Repeat Yourself - modular, reusable components and utilities
*   **Coding Conventions:** Style guides, naming conventions, file organization
*   **Testing Strategy:** Unit, integration, and end-to-end testing approaches
*   **Documentation Requirements:** Code documentation, API documentation, user guides
*   **Security Practices:** Secure coding practices, input validation, vulnerability prevention
*   **Performance Guidelines:** Optimization strategies, monitoring approaches, lazy loading
*   **Quality Validation:** Continuous linting, formatting checks, security scanning, performance testing after each task

### 9. Technical Considerations
*   **Data Persistence:** Database schema planning, indexing, performance considerations (only if data storage is required)
*   **State Management:** Client-side state handling and data flow patterns
*   **Error Handling:** Comprehensive error management strategies and user feedback
*   **Quality Validation:** Automated linting, code formatting, security scanning, performance testing procedures
*   **Logging & Monitoring:** Application logging and performance monitoring during development
*   **Responsive Design:** Mobile-first approach and cross-device compatibility
*   **SEO Implementation:** URL structure, meta data, structured markup, sitemap generation
*   **Security Implementation:** Input sanitization, authentication, authorization, data encryption

### 10. Open Questions
*   List any remaining questions or areas needing further clarification
*   Technical decisions that need to be made
*   External dependencies to confirm

## Target Audience

Target this for **software developers** who will implement the application. Provide sufficient technical detail for consistent, secure, performant, and SEO-optimized development with zero tolerance for vulnerabilities.

## Output

*   **Format:** Markdown (`.md`)
*   **Location:** `/project/`
*   **Filename:** `project-spec-[project-name].md`

## Final Instructions

1. Do NOT start implementing the project
2. Ask comprehensive clarifying questions covering all major development areas
3. Take the user's answers and create a thorough, development-focused PSD
4. Focus on ensuring consistency, security, performance, SEO, and clean code in application development
5. Emphasize zero-vulnerability development and DRY principles throughout
6. Exclude deployment, hosting, and CI/CD considerations - focus purely on building the application
